// 01
Benchmark                       Mode  Cnt           Score           Error  Units
JMHSample_01_HelloWorld.hello  thrpt    5  3332328969.090 ± 742539982.113  ops/s

// 02
Benchmark                                                          Mode  Cnt       Score       Error   Units
JMHSample_02_BenchmarkModes.measureAll                            thrpt    5      ≈ 10⁻⁵              ops/us
JMHSample_02_BenchmarkModes.measureThroughput                     thrpt    5       9.755 ±     0.462   ops/s
JMHSample_02_BenchmarkModes.measureAll                             avgt    5  101439.981 ±  3300.759   us/op
JMHSample_02_BenchmarkModes.measureAvgTime                         avgt    5  104250.314 ± 12725.656   us/op
JMHSample_02_BenchmarkModes.measureAll                           sample  492  102131.462 ±   700.066   us/op
JMHSample_02_BenchmarkModes.measureAll:measureAll·p0.00          sample        97517.568               us/op
JMHSample_02_BenchmarkModes.measureAll:measureAll·p0.50          sample       100663.296               us/op
JMHSample_02_BenchmarkModes.measureAll:measureAll·p0.90          sample       109065.011               us/op
JMHSample_02_BenchmarkModes.measureAll:measureAll·p0.95          sample       115343.360               us/op
JMHSample_02_BenchmarkModes.measureAll:measureAll·p0.99          sample       121775.063               us/op
JMHSample_02_BenchmarkModes.measureAll:measureAll·p0.999         sample       122290.176               us/op
JMHSample_02_BenchmarkModes.measureAll:measureAll·p0.9999        sample       122290.176               us/op
JMHSample_02_BenchmarkModes.measureAll:measureAll·p1.00          sample       122290.176               us/op
JMHSample_02_BenchmarkModes.measureSample                        sample  491  102137.656 ±   719.259   us/op
JMHSample_02_BenchmarkModes.measureSample:measureSample·p0.00    sample        98041.856               us/op
JMHSample_02_BenchmarkModes.measureSample:measureSample·p0.50    sample       100532.224               us/op
JMHSample_02_BenchmarkModes.measureSample:measureSample·p0.90    sample       111358.771               us/op
JMHSample_02_BenchmarkModes.measureSample:measureSample·p0.95    sample       115343.360               us/op
JMHSample_02_BenchmarkModes.measureSample:measureSample·p0.99    sample       121776.374               us/op
JMHSample_02_BenchmarkModes.measureSample:measureSample·p0.999   sample       122028.032               us/op
JMHSample_02_BenchmarkModes.measureSample:measureSample·p0.9999  sample       122028.032               us/op
JMHSample_02_BenchmarkModes.measureSample:measureSample·p1.00    sample       122028.032               us/op
JMHSample_02_BenchmarkModes.measureAll                               ss        87291.814               us/op
JMHSample_02_BenchmarkModes.measureSingleShot                        ss        85510.028               us/op


// 03
Benchmark                             Mode  Cnt          Score          Error  Units
JMHSample_03_States.measureShared    thrpt    5   49753070.494 ±  3987451.250  ops/s
JMHSample_03_States.measureUnshared  thrpt    5  423059291.237 ± 19489839.942  ops/s

// 04
Benchmark                             Mode  Cnt          Score          Error  Units
JMHSample_04_DefaultState.measure    thrpt    5  382220405.729 ± 79715369.288  ops/s

------- multi thread for thread scope
Iteration   1:
Thread[com.jmh.samples.JMHSample_04_MultiThread_ThreadScope.measure-jmh-worker-3,5,main] iteration: 2.1221451745141594E10

Thread[com.jmh.samples.JMHSample_04_MultiThread_ThreadScope.measure-jmh-worker-1,5,main] iteration: 2.1305104992141594E10

Thread[com.jmh.samples.JMHSample_04_MultiThread_ThreadScope.measure-jmh-worker-2,5,main] iteration: 2.1211961284141594E10

Thread[com.jmh.samples.JMHSample_04_MultiThread_ThreadScope.measure-jmh-worker-4,5,main] iteration: 2.1342020463141594E10
1400547350.572 ops/s
Iteration   2:
Thread[com.jmh.samples.JMHSample_04_MultiThread_ThreadScope.measure-jmh-worker-3,5,main] iteration: 2.4745648684141594E10

Thread[com.jmh.samples.JMHSample_04_MultiThread_ThreadScope.measure-jmh-worker-2,5,main] iteration: 2.4735920385141594E10

Thread[com.jmh.samples.JMHSample_04_MultiThread_ThreadScope.measure-jmh-worker-1,5,main] iteration: 2.4828822123141594E10

Thread[com.jmh.samples.JMHSample_04_MultiThread_ThreadScope.measure-jmh-worker-4,5,main] iteration: 2.4872938723141594E10
1409354244.186 ops/s

-------- multi thread for group scope (include warm up iteration  object state)
# Warmup Iteration   5:
Thread[com.jmh.samples.JMHSample_04_MultiThread_GroupScope.group-jmh-worker-1,5,main] iteration: 1.7979647545141594E10

Thread[com.jmh.samples.JMHSample_04_MultiThread_GroupScope.group-jmh-worker-3,5,main] iteration: 1.7913899173141594E10

Thread[com.jmh.samples.JMHSample_04_MultiThread_GroupScope.group-jmh-worker-2,5,main] iteration: 1.7938460465141594E10

Thread[com.jmh.samples.JMHSample_04_MultiThread_GroupScope.group-jmh-worker-4,5,main] iteration: 1.7920028877141594E10
1459855731.084 ops/s
Iteration   1:
Thread[com.jmh.samples.JMHSample_04_MultiThread_GroupScope.group-jmh-worker-3,5,main] iteration: 2.1432864094141594E10

Thread[com.jmh.samples.JMHSample_04_MultiThread_GroupScope.group-jmh-worker-1,5,main] iteration: 2.1530077857141594E10

Thread[com.jmh.samples.JMHSample_04_MultiThread_GroupScope.group-jmh-worker-2,5,main] iteration: 2.1524284041141594E10

Thread[com.jmh.samples.JMHSample_04_MultiThread_GroupScope.group-jmh-worker-4,5,main] iteration: 2.1408941320141594E10
1453908842.759 ops/s
Iteration   2:
Thread[com.jmh.samples.JMHSample_04_MultiThread_GroupScope.group-jmh-worker-3,5,main] iteration: 2.5027453661141594E10

Thread[com.jmh.samples.JMHSample_04_MultiThread_GroupScope.group-jmh-worker-4,5,main] iteration: 2.4999647823141594E10

Thread[com.jmh.samples.JMHSample_04_MultiThread_GroupScope.group-jmh-worker-1,5,main] iteration: 2.5148947299141594E10

Thread[com.jmh.samples.JMHSample_04_MultiThread_GroupScope.group-jmh-worker-2,5,main] iteration: 2.5130181637141594E10
1439490313.025 ops/s

// 05
Iteration   1: 3216531231.626 ops/s
Iteration   2: 3484742314.110 ops/s
Iteration   3: 3403484134.587 ops/s
Iteration   4: 3345767538.431 ops/s
Iteration   5: <failure>

Benchmark                                 Mode  Cnt           Score           Error  Units
JMHSample_05_StateFixtures.measureRight  thrpt    5   373423981.702 ±  60834240.436  ops/s
JMHSample_05_StateFixtures.measureWrong  thrpt    4  3362631304.689 ± 729276557.676  ops/s


// 06
# Run progress: 50.00% complete, ETA 00:01:40
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.AssertionError: Nothing changed?

Benchmark                                Mode  Cnt          Score          Error  Units
JMHSample_06_FixtureLevel.measureRight  thrpt    5  363470810.704 ± 42305276.856  ops/s

---- if (shouldFailOnError)
Benchmark had encountered error, and fail on error was requested
Exception in thread "main" org.openjdk.jmh.runner.RunnerException: Benchmark caught the exception

---- if System.out.println(x)
# Warmup Iteration   1:
3.7558643531415925E9
375277297.699 ops/s
# Warmup Iteration   2:
7.422966337141592E9
366368772.490 ops/s
# Warmup Iteration   3:
1.1004042400141592E10
357665994.094 ops/s
# Warmup Iteration   4:
1.4835788542141592E10
382713213.275 ops/s
# Warmup Iteration   5:
1.8526269801141594E10
368590592.113 ops/s
Iteration   1:
2.2489726183141594E10
395857289.567 ops/s
Iteration   2:
2.6597411860141594E10
410332197.545 ops/s
Iteration   3:
3.0679132060141594E10
407671430.955 ops/s
Iteration   4:
3.4701140357141594E10
401708851.406 ops/s
Iteration   5:
3.8784654963141594E10
407846492.154 ops/s

// 07
Benchmark                                        Mode  Cnt    Score    Error  Units
JMHSample_07_FixtureLevelInvocation.measureCold  avgt    5  112.252 ± 80.883  us/op
JMHSample_07_FixtureLevelInvocation.measureHot   avgt    5    9.720 ±  1.400  us/op

// 08
Benchmark                           Mode  Cnt   Score   Error  Units
JMHSample_08_DeadCode.baseline      avgt    5   0.316 ± 0.028  ns/op
JMHSample_08_DeadCode.measureRight  avgt    5  21.348 ± 4.324  ns/op
JMHSample_08_DeadCode.measureWrong  avgt    5   0.324 ± 0.060  ns/op

// 09
Benchmark                               Mode  Cnt   Score   Error  Units
JMHSample_09_Blackholes.baseline        avgt    5  23.368 ± 2.293  ns/op
JMHSample_09_Blackholes.measureRight_1  avgt    5  41.275 ± 0.950  ns/op
JMHSample_09_Blackholes.measureRight_2  avgt    5  44.007 ± 0.123  ns/op
JMHSample_09_Blackholes.measureWrong    avgt    5  22.398 ± 1.303  ns/op

// 10
Benchmark                                 Mode  Cnt   Score   Error  Units
JMHSample_10_ConstantFold.baseline        avgt    5   2.193 ± 0.477  ns/op
JMHSample_10_ConstantFold.measureRight    avgt    5  20.903 ± 3.523  ns/op
JMHSample_10_ConstantFold.measureWrong_1  avgt    5   2.115 ± 0.492  ns/op
JMHSample_10_ConstantFold.measureWrong_2  avgt    5   2.154 ± 0.186  ns/op

// 11
Benchmark                               Mode  Cnt  Score    Error  Units
JMHSample_11_Loops.measureRight         avgt    5  2.305 ±  0.310  ns/op
JMHSample_11_Loops.measureWrong_1       avgt    5  2.324 ±  0.330  ns/op
JMHSample_11_Loops.measureWrong_10      avgt    5  0.271 ±  0.033  ns/op
JMHSample_11_Loops.measureWrong_100     avgt    5  0.029 ±  0.001  ns/op
JMHSample_11_Loops.measureWrong_1000    avgt    5  0.026 ±  0.001  ns/op
JMHSample_11_Loops.measureWrong_10000   avgt    5  0.022 ±  0.002  ns/op
JMHSample_11_Loops.measureWrong_100000  avgt    5  0.019 ±  0.001  ns/op

// 13
Benchmark                       Mode  Cnt    Score     Error  Units
JMHSample_13_RunToRun.baseline  avgt    3  713.298 ±   0.550  ms/op
JMHSample_13_RunToRun.fork_1    avgt   15  380.127 ± 256.295  ms/op
JMHSample_13_RunToRun.fork_2    avgt   60  471.725 ± 123.911  ms/op

// 15
Benchmark                      Mode  Cnt   Score   Error  Units
JMHSample_15_Asymmetric.g      avgt    5  52.732 ± 1.213  ns/op
JMHSample_15_Asymmetric.g:get  avgt    5  33.674 ± 5.880  ns/op
JMHSample_15_Asymmetric.g:inc  avgt    5  59.085 ± 2.361  ns/op

// 16
Benchmark                                Mode  Cnt   Score    Error  Units
JMHSample_16_CompilerControl.baseline    avgt    3   0.310 ±  0.241  ns/op
JMHSample_16_CompilerControl.blank       avgt    3   0.314 ±  0.263  ns/op
JMHSample_16_CompilerControl.dontInline  avgt    3   1.968 ±  3.347  ns/op
JMHSample_16_CompilerControl.exclude     avgt    3  12.626 ± 14.762  ns/op
JMHSample_16_CompilerControl.inline      avgt    3   0.301 ±  0.091  ns/op


// 17
Iteration   1: 320.395 ops/ms
Iteration   2: 323.147 ops/ms
Iteration   3: 325.551 ops/ms
Iteration   4: 327.523 ops/ms
Iteration   5: 323.373 ops/ms


Result "com.jmh.samples.JMHSample_17_SyncIterations.test":
  323.998 ±(99.9%) 10.356 ops/ms [Average]
  (min, avg, max) = (320.395, 323.998, 327.523), stdev = 2.689
  CI (99.9%): [313.642, 334.353] (assumes normal distribution)


# Run complete. Total time: 00:00:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          Mode  Cnt    Score    Error   Units
JMHSample_17_SyncIterations.test  thrpt    5  323.998 ± 10.356  ops/ms

---- syncIterations = false
Iteration   1: 694.880 ops/ms
Iteration   2: 407.084 ops/ms
Iteration   3: 570.837 ops/ms
Iteration   4: 399.139 ops/ms
Iteration   5: 445.148 ops/ms


Result "com.jmh.samples.JMHSample_17_SyncIterations.test":
  503.418 ±(99.9%) 489.929 ops/ms [Average]
  (min, avg, max) = (399.139, 503.418, 694.880), stdev = 127.233
  CI (99.9%): [13.489, 993.346] (assumes normal distribution)


# Run complete. Total time: 00:00:16

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          Mode  Cnt    Score     Error   Units
JMHSample_17_SyncIterations.test  thrpt    5  503.418 ± 489.929  ops/ms

// 18
Benchmark                             Mode  Cnt         Score          Error  Units
JMHSample_18_Control.ping_pong       thrpt    5  56223996.604 ± 26527334.574  ops/s
JMHSample_18_Control.ping_pong:ping  thrpt    5  28111996.965 ± 13263655.143  ops/s
JMHSample_18_Control.ping_pong:pong  thrpt    5  28111999.639 ± 13263679.432  ops/s